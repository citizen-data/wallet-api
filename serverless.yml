# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: datawallet # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
frameworkVersion: ">=1.28.0 <2.0.0"

provider:
  name: aws
  runtime: go1.x
  region: us-east-2
  accountId: 891335278704
  bucket: "data-wallet-storage"
  apiKeys:
    - slanders
  usagePlan:
    quota:
      limit: 5000
      offset: 2
      period: MONTH
    throttle:
      burstLimit: 200
      rateLimit: 100

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource: [
        "arn:aws:dynamodb:${self:provider.region}:*:table/wallet*",
        "arn:aws:dynamodb:${self:provider.region}:*:table/wallet-shares/index/*",
        "arn:aws:dynamodb:${self:provider.region}:*:table/wallet-data/index/*"
      ]
    - Effect: Allow
      Action:
        - dynamodb:GetItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/apiKeys"
    - Effect: "Allow"
      Action:
        - s3:Put*
        - s3:Get*
      Resource: "arn:aws:s3:::${self:provider.bucket}/*"
    - Effect: "Allow"
      Action:
        - s3:List*
      Resource: "arn:aws:s3:::${self:provider.bucket}"


# you can define service wide environment variables here
#  environment:
#    variable1: value1

package:
 exclude:
   - ./**
 include:
   - ./bin/**

functions:
  createwallet:
    handler: bin/create-wallet
    events:
      - http:
          path: wallet
          method: post
          cors: true
          private: true
  add-data:
    handler: bin/add-data
    events:
      - http:
          path: wallet/{wallet}/data
          method: post
          cors: true
          private: true
  list-data:
    handler: bin/list-data
    events:
      - http:
          path: wallet/{wallet}
          method: get
          cors: true
          private: true
  get-data:
    handler: bin/get-data
    events:
      - http:
          path: wallet/{wallet}/data/{referenceId}/{version}
          method: get
          cors: true
          private: true
  get-data-history:
    handler: bin/get-data-history
    events:
      - http:
          path: wallet/{wallet}/data/{referenceId}
          method: get
          cors: true
          private: true
  share-data:
    handler: bin/share-data
    events:
      - http:
          path: wallet/{wallet}/share/{toWallet}/data
          method: post
          cors: true
          private: true
  list-shared-data:
    handler: bin/list-shared-data
    events:
      - http:
          path: wallet/{wallet}/shares
          method: get
          cors: true
          private: true
  get-shared-data:
    handler: bin/get-shared-data
    events:
      - http:
          path: wallet/{wallet}/share/data/{fromWallet}/{referenceId}/{version}
          method: get
          cors: true
          private: true
  get-public-key:
    handler: bin/get-public-key
    events:
      - http:
          path: public/key/{wallet}
          method: get
          cors: true
          private: true


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
# events:
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
